generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ========================= Enums =========================
enum StatusOrcamento {
  RASCUNHO
  ENVIADO
  APROVADO
  REJEITADO
  VENCIDO
  CANCELADO
}

enum StatusContrato {
  RASCUNHO
  ATIVO
  CONCLUIDO
  CANCELADO
}

enum StatusTitulo {
  PENDENTE
  PARCIAL
  PAGO
  VENCIDO
  CANCELADO
}

enum MetodoPagamento {
  PIX
  DINHEIRO
  CREDITO
  DEBITO
  BOLETO
  TED
  DOC
  OUTRO
}

enum TipoCaixa {
  ENTRADA
  SAIDA
}

enum TipoItem {
  PRO
  SER
}

// ========================= Núcleo =========================
model Empresa {
  id          Int     @id @default(autoincrement())
  uuid        String  @unique @default(uuid()) @db.Uuid
  nome        String
  razaoSocial String?
  email       String  @unique
  telefone    String?
  senha       String
  cnpj        String  @unique
  rua         String?
  numero      String?
  complemento String?
  bairro      String?
  cidade      String?
  estado      String?
  cep         String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
  deleted   Boolean   @default(false)

  clientes       Cliente[]
  fornecedores   Fornecedor[]
  locais         LocalEvento[]
  itens          Item[]
  orcamentos     Orcamento[]
  contratos      Contrato[]
  contasPagar    ContaPagar[]
  contasReceber  ContaReceber[]
  CategoriaFesta CategoriaFesta[]
  caixaEntradas  CaixaEntrada[]
  caixaSaidas    CaixaSaida[]

  // Templates de contrato por empresa
  contratoTemplates ContratoTemplate[]
}

model Cliente {
  id          Int     @id @default(autoincrement())
  uuid        String  @unique @default(uuid()) @db.Uuid
  nome        String
  cpf         String?
  telefone    String?
  email       String?
  rua         String?
  numero      String?
  complemento String?
  bairro      String?
  cidade      String?
  estado      String?
  cep         String?
  empresaId   Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
  deleted   Boolean   @default(false)

  empresa    Empresa        @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  orcamentos Orcamento[]
  contratos  Contrato[]
  titulos    ContaReceber[]
}

model Fornecedor {
  id          Int     @id @default(autoincrement())
  uuid        String  @unique @default(uuid()) @db.Uuid
  nome        String
  cnpj        String?
  telefone    String?
  email       String?
  rua         String?
  numero      String?
  complemento String?
  bairro      String?
  cidade      String?
  estado      String?
  cep         String?
  empresaId   Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
  deleted   Boolean   @default(false)

  empresa Empresa      @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  titulos ContaPagar[]
}

model LocalEvento {
  id          Int     @id @default(autoincrement())
  uuid        String  @unique @default(uuid()) @db.Uuid
  descricao   String
  rua         String?
  numero      String?
  complemento String?
  bairro      String?
  cidade      String?
  estado      String?
  cep         String?
  telefone    String?
  empresaId   Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
  deleted   Boolean   @default(false)

  empresa    Empresa     @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  orcamentos Orcamento[]
  contratos  Contrato[]
}

model Item {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid()) @db.Uuid
  nome      String
  descricao String?
  tipo      TipoItem @default(PRO)
  precoBase Int // Valor em centavos
  empresaId Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
  deleted   Boolean   @default(false)

  empresa        Empresa         @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  orcamentoItens OrcamentoItem[]
  contratoItens  ContratoItem[]
}

model CategoriaFesta {
  id        Int    @id @default(autoincrement())
  uuid      String @unique @default(uuid()) @db.Uuid
  descricao String
  empresaId Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
  deleted   Boolean   @default(false)

  empresa    Empresa     @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  contratos  Contrato[]
  orcamentos Orcamento[]
}

model Orcamento {
  id          Int             @id @default(autoincrement())
  uuid        String          @unique @default(uuid()) @db.Uuid
  empresaId   Int
  clienteId   Int
  categoriaId Int?
  localId     Int?
  dataEvento  DateTime?
  status      StatusOrcamento @default(RASCUNHO)
  desconto    Int? // Valor em centavos
  total       Int // Valor em centavos
  observacao  String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
  deleted   Boolean   @default(false)

  empresa Empresa      @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  cliente Cliente      @relation(fields: [clienteId], references: [id], onDelete: Restrict)
  local   LocalEvento? @relation(fields: [localId], references: [id], onDelete: SetNull)

  itens          OrcamentoItem[]
  contrato       Contrato?
  categoriaFesta CategoriaFesta? @relation(fields: [categoriaId], references: [id])
}

model OrcamentoItem {
  id          Int    @id @default(autoincrement())
  uuid        String @unique @default(uuid()) @db.Uuid
  orcamentoId Int
  itemId      Int
  quantidade  Int // Quantidade em milésimos (ex: 1.500 = 1,5)
  desconto    Int // Valor em centavos
  valorUnit   Int // Valor em centavos
  valorTotal  Int // Valor em centavos

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
  deleted   Boolean   @default(false)

  orcamento Orcamento @relation(fields: [orcamentoId], references: [id], onDelete: Cascade)
  item      Item      @relation(fields: [itemId], references: [id], onDelete: Restrict)

  @@unique([orcamentoId, itemId])
}

model Contrato {
  id          Int            @id @default(autoincrement())
  uuid        String         @unique @default(uuid()) @db.Uuid
  empresaId   Int
  clienteId   Int
  localId     Int?
  categoriaId Int?
  orcamentoId Int?           @unique
  dataEvento  DateTime
  horaInicio  DateTime
  status      StatusContrato @default(ATIVO)
  desconto    Int? // Valor em centavos
  total       Int // Valor em centavos
  observacao  String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
  deleted   Boolean   @default(false)

  empresa   Empresa      @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  cliente   Cliente      @relation(fields: [clienteId], references: [id], onDelete: Restrict)
  local     LocalEvento? @relation(fields: [localId], references: [id], onDelete: SetNull)
  orcamento Orcamento?   @relation(fields: [orcamentoId], references: [id], onDelete: SetNull)

  itens          ContratoItem[]
  contasReceber  ContaReceber[]
  categoriaFesta CategoriaFesta? @relation(fields: [categoriaId], references: [id])

  // Snapshot de cláusulas por contrato
  clausulas ContratoClausula[]
}

model ContratoItem {
  id         Int    @id @default(autoincrement())
  uuid       String @unique @default(uuid()) @db.Uuid
  contratoId Int
  itemId     Int
  quantidade Int // Quantidade em milésimos (ex: 1.500 = 1,5)
  desconto   Int // Valor em centavos
  valorUnit  Int // Valor em centavos
  valorTotal Int // Valor em centavos

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
  deleted   Boolean   @default(false)

  contrato Contrato @relation(fields: [contratoId], references: [id], onDelete: Cascade)
  item     Item     @relation(fields: [itemId], references: [id], onDelete: Restrict)

  @@unique([contratoId, itemId])
}

// ========================= Financeiro =========================
model ContaPagar {
  id             Int          @id @default(autoincrement())
  uuid           String       @unique @default(uuid()) @db.Uuid
  empresaId      Int
  fornecedorId   Int
  descricao      String?
  dataVencimento DateTime?
  dataPagamento  DateTime?
  valorPago      Int          @default(0) // Valor em centavos
  valorRestante  Int? // Valor em centavos
  valorTotal     Int // Valor em centavos
  status         StatusTitulo @default(PENDENTE)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
  deleted   Boolean   @default(false)

  empresa    Empresa      @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  fornecedor Fornecedor   @relation(fields: [fornecedorId], references: [id], onDelete: Restrict)
  caixaSaida CaixaSaida[]
}

model ContaReceber {
  id             Int          @id @default(autoincrement())
  uuid           String       @unique @default(uuid()) @db.Uuid
  empresaId      Int
  clienteId      Int
  contratoId     Int?
  dataVencimento DateTime?
  dataPagamento  DateTime?
  valorPago      Int          @default(0) // Valor em centavos
  valorRestante  Int? // Valor em centavos
  valorTotal     Int // Valor em centavos
  status         StatusTitulo @default(PENDENTE)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
  deleted   Boolean   @default(false)

  empresa      Empresa        @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  cliente      Cliente        @relation(fields: [clienteId], references: [id], onDelete: Restrict)
  contrato     Contrato?      @relation(fields: [contratoId], references: [id], onDelete: SetNull)
  caixaEntrada CaixaEntrada[]
}

model CaixaEntrada {
  id              Int             @id @default(autoincrement())
  uuid            String          @unique @default(uuid()) @db.Uuid
  empresaId       Int
  contasReceberId Int
  descricao       String?
  valor           Int // Valor em centavos
  dataRecebimento DateTime
  metodo          MetodoPagamento
  parcela         Int?
  totalParcelas   Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
  deleted   Boolean   @default(false)

  empresa       Empresa      @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  contasReceber ContaReceber @relation(fields: [contasReceberId], references: [id], onDelete: Restrict)
}

model CaixaSaida {
  id            Int             @id @default(autoincrement())
  uuid          String          @unique @default(uuid()) @db.Uuid
  empresaId     Int
  contasPagarId Int
  descricao     String?
  valor         Int // Valor em centavos
  dataPagamento DateTime
  metodo        MetodoPagamento
  parcela       Int?
  totalParcelas Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
  deleted   Boolean   @default(false)

  empresa     Empresa    @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  contasPagar ContaPagar @relation(fields: [contasPagarId], references: [id], onDelete: Restrict)
}

// ========================= Contratos - Templates & Cláusulas =========================
model ContratoTemplate {
  id        Int    @id @default(autoincrement())
  uuid      String @unique @default(uuid()) @db.Uuid
  empresaId Int
  titulo    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  empresa   Empresa            @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  clausulas ClausulaTemplate[]
}

model ClausulaTemplate {
  id          Int     @id @default(autoincrement())
  uuid        String  @unique @default(uuid()) @db.Uuid
  templateId  Int
  ordem       Int
  titulo      String
  conteudo    String
  editavel    Boolean @default(true)
  obrigatoria Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  template ContratoTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId, ordem])
}

model ContratoClausula {
  id                  Int     @id @default(autoincrement())
  uuid                String  @unique @default(uuid()) @db.Uuid
  contratoId          Int
  ordem               Int
  titulo              String
  conteudo            String
  templateClausulaId  Int?
  alteradaPeloUsuario Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contrato Contrato @relation(fields: [contratoId], references: [id], onDelete: Cascade)

  @@index([contratoId, ordem])
}
